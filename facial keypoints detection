{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":3486,"databundleVersionId":31310,"sourceType":"competition"}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-06T05:40:01.697300Z","iopub.execute_input":"2024-11-06T05:40:01.697653Z","iopub.status.idle":"2024-11-06T05:40:02.671893Z","shell.execute_reply.started":"2024-11-06T05:40:01.697610Z","shell.execute_reply":"2024-11-06T05:40:02.670971Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/facial-keypoints-detection/training.zip\n/kaggle/input/facial-keypoints-detection/SampleSubmission.csv\n/kaggle/input/facial-keypoints-detection/IdLookupTable.csv\n/kaggle/input/facial-keypoints-detection/test.zip\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install torchsummary","metadata":{"execution":{"iopub.status.busy":"2024-10-28T01:58:40.420692Z","iopub.execute_input":"2024-10-28T01:58:40.421128Z","iopub.status.idle":"2024-10-28T01:58:52.276746Z","shell.execute_reply.started":"2024-10-28T01:58:40.421090Z","shell.execute_reply":"2024-10-28T01:58:52.275407Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Requirement already satisfied: torchsummary in /opt/conda/lib/python3.10/site-packages (1.5.1)\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom torchsummary import summary\nfrom torch.optim import lr_scheduler\n\nfrom sklearn.model_selection import train_test_split\n\nimport seaborn as sns\nfrom PIL import Image\nimport cv2\nimport matplotlib.pyplot as plt\nimport random\nimport scipy.ndimage\nfrom tqdm import tqdm\n\nprint(\"FIN\")","metadata":{"execution":{"iopub.status.busy":"2024-10-28T01:58:52.279129Z","iopub.execute_input":"2024-10-28T01:58:52.279485Z","iopub.status.idle":"2024-10-28T01:58:54.758840Z","shell.execute_reply.started":"2024-10-28T01:58:52.279448Z","shell.execute_reply":"2024-10-28T01:58:54.757832Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"FIN\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 列ごとに予測、グルーピング","metadata":{}},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/training.zip\")\ntest  = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/test.zip\")\nIdL   = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/IdLookupTable.csv\")\nsamp  = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/SampleSubmission.csv\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 各列のnull値のブールマスクを取得\nnull_mask = train.isnull().astype(int)  # null値を1、非null値を0に変換\n\n# 相関行列の計算\ncorrelation_matrix = null_mask.abs().corr()\n\n# ヒートマップの描画\nplt.figure(figsize=(16, 12))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', square=True, cbar_kws={\"shrink\": .8},\n            annot_kws={'color': 'black'})  # 文字の色を黒に統一\nplt.title('Correlation of Null Value Distributions')\nplt.xlabel('Features')\nplt.ylabel('Features')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train[\"nose_tip_x\"].isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 絶対値が0.95以上の相関係数を抽出\nhigh_correlation = correlation_matrix[abs(correlation_matrix) >= 0.95]\n\n# 結果の表示\nprint(\"Absolute Correlation Coefficients (>= 0.95):\")\nhigh_correlation.dropna(how='all').dropna(axis=1, how='all')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"group = [[\"Image\",\"nose_tip_x\",\"nose_tip_y\"]]\ngroup_num = [[20,21]]\nvisited = [False for _ in range(len(train.columns))]\nlabels = [i for i in train.columns]\n\nfor i in range(len(train.columns)):\n    if visited[i] or labels[i] in [\"nose_tip_x\",\"nose_tip_y\",\"Image\"]:\n        continue\n    group_i = [\"Image\"]+[labels[i]]\n    group_i_num = [i]\n    \n    for j in range(i+1,len(train.columns)):\n#         print(i,j)\n        if not np.isnan(high_correlation.iloc[i,j]):\n            visited[j]=True\n            group_i.append(labels[j])\n            group_i_num.append(j)\n    if len(group_i)>1:\n        group.append(group_i)\n        group_num.append(group_i_num)\nprint(group)\nprint(group_num)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## train_列","metadata":{}},{"cell_type":"code","source":"# クラス定義\nclass CNNModel(nn.Module):\n    def __init__(self, output_unit):\n        super(CNNModel, self).__init__()\n        \n        # 畳み込み層1\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3) # output_size = (96-3)/1+1=94\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2) # output_size = 94/2=47\n        \n        # 畳み込み層2\n        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3)# output_size = (47-3)/1+1=45\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)# output_size = 45/22\n        \n        # 畳み込み層3\n        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3)# output_size = (22-3)/1+1=20\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)# output_size = 20/2=10\n        \n        # Dropout 層を追加（ドロップアウト率 0.5）\n        self.dropout = nn.Dropout(p=0.5)\n        \n        # 全結合層\n        self.fc1 = nn.Linear(128 * 10 * 10, 500)  # 畳み込み後の画像サイズを計算 (128, 10, 10)\n        self.fc2 = nn.Linear(500, 500)\n        self.fc3 = nn.Linear(500, 500)\n        self.fc4 = nn.Linear(500, output_unit)\n    \n    def forward(self, x):\n        # 畳み込み層と活性化関数とプーリング\n        x = self.pool1(F.relu(self.conv1(x)))\n        x = self.pool2(F.relu(self.conv2(x)))\n        x = self.pool3(F.relu(self.conv3(x)))\n        \n        # フラット化\n        x = x.view(-1, 128 * 10 * 10)  # Flatten the tensor\n        \n        # 全結合層と活性化関数 + Dropout\n        x = F.relu(self.fc1(x))\n        x = self.dropout(x)  # Dropoutを適用\n        \n        x = F.relu(self.fc2(x))\n        x = self.dropout(x)  # Dropoutを適用\n        \n        x = F.relu(self.fc3(x))\n        x = self.dropout(x)  # Dropoutを適用\n        \n        x = self.fc4(x)  # 最後の層では出力層に活性化関数を適用しない\n        \n        return x","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 画像のリシェイプ関数を定義\ndef str_to_image(image_str, img_size=96):\n    # 文字列を数値リストに変換\n    pixel_values = list(map(int, image_str.split()))\n    # 96x96にリシェイプ\n    return np.array(pixel_values).reshape(img_size, img_size)\n\n# 各行に対してリシェイプ操作を行う\ntrain['Image'] = train['Image'].apply(lambda x: str_to_image(x))/255\ntest['Image']  = test['Image'].apply(lambda x: str_to_image(x))/255\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train[\"Image\"].head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# groupごとに学習を行う\n\nx_test  = torch.tensor(test[\"Image\"], dtype=torch.float32)# test用の画像\n# (1783, 96, 96) -> (1783, 1, 96, 96) に次元を追加\nx_test = x_test.unsqueeze(1)\n\n# print(x_test.shape)\n# x_test = x_test.permute(0, 3, 1, 2)\ntest_loader   = DataLoader(x_test, batch_size=1, shuffle=False)\n\nfor labels in group:\n    print(\"変形\",labels)\n    y_train_filled = train[labels].dropna()\n    x_train = y_train_filled[\"Image\"]\n    y_train_filled = y_train_filled.drop(['Image'],axis=1)/96\n    print(\"size_ratio\", len(y_train_filled)/len(train))\n    print(f\"size:{len(y_train_filled)}/{len(train)}\")\n    \n    y_train_filled = torch.tensor(np.array(y_train_filled), dtype=torch.float32) #処理後の目的変数\n    x_train = torch.tensor(x_train, dtype=torch.float32)# train用の画像\n    \n    # (7049, 96, 96, 1) -> (7049, 1, 96, 96) に変換\n    x_train = x_train.unsqueeze(1)\n#     x_train = x_train.permute(0, 3, 1, 2)\n#     print(f'x_train shape: {x_train.shape}')  # (7049, 1, 96, 96) のように出力されるべき\n    \n    # データを8:2に分割する\n    x_train_split, x_val_split, y_train_fine_split, y_val_fine_split = train_test_split(\n        x_train, y_train_filled, test_size=0.2, random_state=42\n    )\n    \n    \n    \n    # データセットとデータローダーの作成\n    train_dataset = TensorDataset(x_train_split, y_train_fine_split)\n    train_loader  = DataLoader(train_dataset, batch_size=32, shuffle=True)\n    val_loader    = DataLoader(TensorDataset(x_val_split, y_val_fine_split), batch_size=1, shuffle=False)\n\n    # モデルのインスタンスを作成\n    model = CNNModel(len(labels)-1)# 出力層のunit数はlabels-1\n\n    # 損失関数と最適化アルゴリズム\n    criterion = nn.MSELoss()  # 平均二乗誤差損失関数\n    optimizer = optim.Adam(model.parameters(), lr=0.01)\n\n    # アーリーストッピングの設定\n    early_stopping_patience = 5  # 5エポック改善がなければストップ\n    min_val_loss = np.inf\n    epochs_no_improve = 0\n\n    # 学習曲線を描くためのリスト\n    train_losses = []\n    val_losses = []  # バリデーション損失を記録するリスト\n\n    # 学習ループ\n    print(\"train\",labels)\n    num_epochs = 20\n    for epoch in range(num_epochs):\n        model.train()  # 訓練モード\n        running_loss = 0.0\n\n        for i, (inputs, targets) in enumerate(train_loader):\n            optimizer.zero_grad()  # 勾配の初期化\n            \n#             print(inputs.shape)\n\n            # 順伝播\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n\n            # 逆伝播と最適化\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item()\n\n        # エポックごとの平均損失を記録\n        epoch_loss = running_loss / len(train_loader)\n        train_losses.append(epoch_loss)\n\n        # バリデーションデータでの評価\n        model.eval()  # 評価モード\n        val_running_loss = 0.0\n\n        with torch.no_grad():  # 勾配計算を無効にする\n            for inputs, targets in val_loader:\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                val_running_loss += loss.item()\n\n        val_epoch_loss = val_running_loss / len(val_loader)  # バリデーションの平均損失\n        val_losses.append(val_epoch_loss)\n\n        # 学習の進行状況を表示\n        print(f'Epoch [{epoch+1}/{num_epochs}], Train Loss: {epoch_loss:.4f}, Val Loss: {val_epoch_loss:.4f}')\n\n        # アーリーストッピングの判定\n        if val_epoch_loss < min_val_loss:\n            min_val_loss = val_epoch_loss\n            epochs_no_improve = 0\n        else:\n            epochs_no_improve += 1\n\n        if epochs_no_improve == early_stopping_patience:\n            print(\"Early stopping\")\n            break\n    \n    # 学習曲線の描画\n    print(\"glf\",labels)\n    plt.plot(train_losses, label='Training Loss')\n    plt.plot(val_losses, label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.yscale('log')\n    plt.title('Loss Curve')\n    plt.legend()\n    plt.show()\n    \n    print(\"test\")\n    # test\n    # モデルを評価モードに切り替え\n    model.eval()\n    \n    # テスト時は勾配を計算しないようにするため、torch.no_grad()を使う\n    with torch.no_grad():\n        # \"Image\"をlabelsから削除\n        labels = [label for label in labels if label != 'Image']\n        \n        # テストデータをバッチごとにループ\n        for i, inputs in enumerate(test_loader):\n            # モデルに入力データを渡して予測を取得\n            outputs = model(inputs)\n            # 0より小さい、または1より大きい値があるか検査\n            if (outputs < 0).any() or (outputs > 1).any():\n                print(\"error\")\n            # 予測結果をリストに追加\n            test.loc[i, labels] = outputs.detach().numpy()\n            \n#             if i>5:\n#                 print(test.head(5))\n\nprint(\"FIN\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## submit_列","metadata":{}},{"cell_type":"code","source":"# 結果を確認\nprint(IdL.isnull().sum())\n\n# 'ImageID' と 'FeatureName' に基づいて、2次元表から値を取り出して 'Location' に格納\nfor idx, row in IdL.iterrows():\n    image_id = row['ImageId']-1\n    feature_name = row['FeatureName']\n    \n    # 2次元表(pivot_table)から、対応する 'ImageID' と 'FeatureName' の値を取得\n    value = test.loc[image_id, feature_name]\n    \n    # 'Location' 列に値を格納\n    IdL.at[idx, 'Location'] = value\n\n\n# 結果を確認\nprint(IdL.isnull().sum())\nprint(IdL.head())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"IdL = IdL.drop(['ImageId',\"FeatureName\"],axis=1)\n\nIdL.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"IdL[\"Location\"] = IdL[\"Location\"]*96","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"IdL[\"Location\"].max(), IdL[\"Location\"].min()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# CSVファイルに出力（インデックスなし）\nIdL.to_csv('submission_ffill_4.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"IdL.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# DA、ファインチューニング\n* すべてのデータに対してdropnaする(1)\n* (1)に対して、DA拡張（回転、水平移動、ノイズ付与）\n* コンボリューション層の重みを固定して、NNの重みを、タスクごとに最適化する","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/training.zip\")\ntest  = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/test.zip\")\nIdL   = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/IdLookupTable.csv\")\nsamp  = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/SampleSubmission.csv\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(train.shape,train.isnull().sum())\ntrain_droped = train.dropna()\nprint(train_droped.shape,train_droped.isnull().sum())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(train_droped[\"Image\"].head())\n# np配列に変換\ntrain_droped.loc[:, \"Image\"] = train_droped[\"Image\"].apply(lambda x:np.array([num for num in x.split(\" \")], dtype=np.uint8))\n# 2次元データに変換\ntrain_droped.loc[:, \"Image\"] = train_droped[\"Image\"].apply(lambda x:x.reshape(96, 96))\nprint(train_droped[\"Image\"].head())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"labels = [label for label in train_droped if label!=\"Image\"]\n\ndef adjust_brightness(image, brightness_factor=1.0,beta_factor=0):\n    # 輝度を調整する関数\n    ad_image = cv2.convertScaleAbs(image, alpha=brightness_factor, beta=beta_factor)\n    return ad_image\n\ndef scale_image_and_landmarks(image, landmarks, scale_factor):\n    # 画像とランドマークをスケーリングする関数\n    h, w = image.shape[:2]\n    scaled_image = cv2.resize(image, (0, 0), fx=scale_factor, fy=scale_factor)\n    scaled_landmarks = landmarks * scale_factor\n\n    # 画像の中心に合わせてスケーリング結果を切り抜く、またはパディング\n    if scale_factor > 1:\n        new_h, new_w = scaled_image.shape[:2]\n        y_offset = (new_h - h) // 2\n        x_offset = (new_w - w) // 2\n        scaled_image = scaled_image[y_offset:y_offset + h, x_offset:x_offset + w]\n        scaled_landmarks -= [x_offset, y_offset]\n    else:\n        padded_image = np.zeros((h, w), dtype=image.dtype)\n        y_offset = (h - scaled_image.shape[0]) // 2\n        x_offset = (w - scaled_image.shape[1]) // 2\n        padded_image[y_offset:y_offset + scaled_image.shape[0], x_offset:x_offset + scaled_image.shape[1]] = scaled_image\n        scaled_image = padded_image\n        scaled_landmarks += [x_offset, y_offset]\n\n    return scaled_image, scaled_landmarks.flatten()\n\n\n\ndef rotate_image_and_landmarks(image, landmarks, angle):\n    # 画像の中心を軸に回転\n    h, w = image.shape[:2]\n    center = (w / 2, h / 2)\n    \n    # 回転行列を取得\n    rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)\n    \n    # 画像を回転（欠損ピクセルを最も近いピクセルで埋める）\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REPLICATE)\n    \n    # ランドマークを回転\n    cos_a = np.cos(np.radians(angle))\n    sin_a = np.sin(np.radians(angle))\n    rotation_matrix_landmarks = np.array([[cos_a, -sin_a], [sin_a, cos_a]])\n    \n    # ランドマーク座標の中心を画像の中心に合わせて回転\n    rotated_landmarks = np.dot(landmarks - np.array([w / 2, h / 2]), rotation_matrix_landmarks) + np.array([w / 2, h / 2])\n\n    return rotated_image, rotated_landmarks.flatten()\n\ndef shift_image_and_landmarks(image, landmarks, shift_x, shift_y):\n    h, w = image.shape[:2]  # 画像の高さと幅\n    # 平行移動行列を作成\n    translation_matrix = np.float32([[1, 0, shift_x], [0, 1, shift_y]])\n    # OpenCVを使って画像を平行移動\n    shifted_image = cv2.warpAffine(image, translation_matrix, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REPLICATE)\n    # ランドマークも平行移動\n    shifted_landmarks = landmarks + np.array([shift_x, shift_y])\n    \n    return shifted_image, shifted_landmarks.flatten()\n\ndef add_noise(image, noise_factor=0.05):\n    # 画像にノイズを加える\n    img_array = image / 255.0\n    noise = np.random.normal(loc=0, scale=noise_factor, size=img_array.shape)\n    noisy_image = np.clip(img_array + noise, 0, 1) * 255\n\n    return noisy_image.astype(np.uint8)\n\ndef DA_module(image, landmarks):\n    \"\"\"\n    image:2次元を想定\n    landmarks:2次を想定\n    \n    やることリスト\n    angle:角度を変更\n    shift:水平垂直に移動\n    scale:スケールを変更\n    brightness:輝度変更\n    noise:ノイズ付加\n    \"\"\"\n    \n    # angle\n    angle = int(np.random.uniform(-20, 20))  # -30から30の範囲からサンプリング\n    image, landmarks = rotate_image_and_landmarks(image, landmarks, angle)\n    \n    # shift\n    shift_x = int(np.random.uniform(-10, 10))  # -10から10の範囲からサンプリング\n    shift_y = int(np.random.uniform(-10, 10))  # -10から10の範囲からサンプリング\n    image, landmarks = shift_image_and_landmarks(image, landmarks.reshape(-1, 2), shift_x, shift_y)\n    \n    # スケール変更\n    scale_factor = np.random.uniform(0.9, 1.1)\n    image, landmarks = scale_image_and_landmarks(image, landmarks.reshape(-1, 2), scale_factor)\n    \n    # 輝度調節\n    brightness_factor = np.random.uniform(0.8, 1.2)\n    beta_factor = np.random.uniform(-20,+20)\n    image = adjust_brightness(image, brightness_factor,beta_factor)\n    \n    #noise\n    noise_factor = np.random.uniform(0.01, 0.05)\n    image        = add_noise(image, noise_factor)\n    \n    return image, landmarks.flatten()\n\n# ガウス分布から値を生成する関数\ndef sample_from_gaussian(mu, sigma):\n    return np.random.normal(mu, sigma)\n\ndef viewer(input_,ans_coords):\n#      = df[\"Image\"]\n#      = df.drop(\"Image\")\n    # プロットのために特徴点のx, y座標を分割\n    x_ans_coords = ans_coords[0::2]  # x座標\n    y_ans_coords = ans_coords[1::2]  # y座標\n\n    # 可視化\n    # 入力データの一つを表示 (ここでは画像データを想定)\n    plt.imshow(input_,cmap='gray')  # 入力データの形状に応じて適宜変更\n    plt.scatter(x_ans_coords, y_ans_coords, color='blue', s=20)  # 特徴点を赤い点で表示\n    plt.show()\n    \ndef delete_rows(df):\n    size_before = df.shape[0]\n    coord_columns = [col for col in df.columns if col!=\"Image\"]\n    \n     # 各座標が0 < x < 96 の条件に合うかどうかを確認\n    mask = (df[coord_columns] > 0) & (df[coord_columns] < 96)\n    \n    # 全ての座標が条件を満たしている行のみ残す\n    df_filtered = df[mask.all(axis=1)]\n    print(\"削除した行数\",-df_filtered.shape[0]+size_before, \"全体\",size_before)\n    \n    return df_filtered","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 変更後\ndef augment_data(df):\n    augmented_images = []\n    augmented_landmarks = []\n    \n    for index, row in tqdm(df.iterrows(), total=df.shape[0], desc=\"Processing Rows\"):\n        landmarks = row.drop(\"Image\").to_numpy()\n        image = row[\"Image\"]\n        landmarks_re = np.array(landmarks).reshape(-1, 2)\n\n        for _ in range(10):\n            noisy_image, shift_rotate_landmarks = DA_module(image, landmarks_re)\n            augmented_images.append(noisy_image)\n            augmented_landmarks.append(shift_rotate_landmarks) \n\n    # 新しいデータフレームを作成\n    augmented_df = pd.DataFrame({'Image': augmented_images})\n    for ind, label in enumerate(labels):\n        augmented_df[label] = [lm[ind] for lm in augmented_landmarks]\n\n    df_augmented = pd.concat([df, augmented_df], ignore_index=True)\n    \n    return df_augmented","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check、回転\n# train_droped.loc[0,\"Image\"]\n\nviewer(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels])\nrotate_image_and_landmarks(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2),20)\nviewer(*rotate_image_and_landmarks(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2),20))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check, 移動\nviewer(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels])\nshift_image_and_landmarks(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2),5,5)\nviewer(*shift_image_and_landmarks(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2),5,5))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check, noise\nviewer(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels])\n# add_noise(train_droped.loc[0,\"Image\"])\nviewer(add_noise(train_droped.loc[0,\"Image\"]),train_droped.loc[0,labels])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check、輝度\n# train_droped.loc[0,\"Image\"]\n\nviewer(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels])\n# adjust_brightness(train_droped.loc[0,\"Image\"])\nviewer(adjust_brightness(train_droped.loc[0,\"Image\"],.5,-50),train_droped.loc[0,labels])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check、スケール\n# train_droped.loc[0,\"Image\"]\n\nviewer(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels])\n# scale_image_and_landmarks(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2),1)\nviewer(*scale_image_and_landmarks(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2),0.5))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check, all\n\nviewer(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels])\n# DA_module(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2))\nfor _ in range(10):\n    viewer(*DA_module(train_droped.loc[0,\"Image\"],train_droped.loc[0,labels].to_numpy().reshape(-1, 2)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## train_fine\n* modelは検証のために3つ用意。","metadata":{}},{"cell_type":"code","source":"class CNNModel(nn.Module):\n    def __init__(self, output_unit):\n        super(CNNModel, self).__init__()\n\n        # 畳み込み層1\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, padding=1)  # 出力サイズ: 96×96\n        self.bn1 = nn.BatchNorm2d(32)\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 48×48\n        self.dropout1 = nn.Dropout(p=0.5)\n\n        # 畳み込み層2\n        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1)  # 出力サイズ: 48×48\n        self.bn2 = nn.BatchNorm2d(64)\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 24×24\n        self.dropout2 = nn.Dropout(p=0.5)\n\n        # 畳み込み層3\n        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1)  # 出力サイズ: 24×24\n        self.bn3 = nn.BatchNorm2d(128)\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 12×12\n        self.dropout3 = nn.Dropout(p=0.5)\n\n        # 畳み込み層4\n        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1)  # 出力サイズ: 12×12\n        self.bn4 = nn.BatchNorm2d(256)\n        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 6×6\n        self.dropout4 = nn.Dropout(p=0.5)\n\n        # 畳み込み層5\n        self.conv5 = nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, padding=1)  # 出力サイズ: 6×6\n        self.bn5 = nn.BatchNorm2d(512)\n        self.pool5 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 3×3\n        self.dropout5 = nn.Dropout(p=0.5)\n\n        # 畳み込み層6\n        self.conv6 = nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=3, padding=1)  # 出力サイズ: 3×3\n        self.bn6 = nn.BatchNorm2d(1024)\n        self.dropout6 = nn.Dropout(p=0.5)\n\n        # 全結合層\n        self.fc1 = nn.Linear(1024 * 3 * 3, 1024 * 3)  # 畳み込み後のサイズを考慮\n        self.bn_fc1 = nn.BatchNorm1d(1024 * 3)  # 全結合層1のバッチノーマライゼーション\n        self.fc2 = nn.Linear(1024 * 3, 1024)\n        self.fc3 = nn.Linear(1024, output_unit)\n\n        # 全結合層用 Dropout\n        self.dropout_fc = nn.Dropout(p=0.5)\n        \n    def forward(self, x):\n        # 畳み込み層1とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout1(self.pool1(F.relu(self.bn1(self.conv1(x)))))\n\n        # 畳み込み層2とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout2(self.pool2(F.relu(self.bn2(self.conv2(x)))))\n\n        # 畳み込み層3とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout3(self.pool3(F.relu(self.bn3(self.conv3(x)))))\n\n        # 畳み込み層4とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout4(self.pool4(F.relu(self.bn4(self.conv4(x)))))\n\n        # 畳み込み層5とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout5(self.pool5(F.relu(self.bn5(self.conv5(x)))))\n        \n        # 畳み込み層6とバッチノーマライゼーション、活性化関数、ドロップアウト\n        x = self.dropout6(F.relu(self.bn6(self.conv6(x))))\n\n        # フラット化\n        x = x.view(-1, 1024 * 3 * 3)\n\n        # 全結合層1にバッチノーマライゼーションとドロップアウト\n        x = self.dropout_fc(F.relu(self.bn_fc1(self.fc1(x))))\n\n        # 全結合層2とドロップアウト\n        x = self.dropout_fc(F.relu(self.fc2(x)))\n\n        # 出力層\n        x = self.fc3(x)\n\n        return x\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 浅いモデル\nclass CNNModel(nn.Module):\n    def __init__(self, output_unit):\n        super(CNNModel, self).__init__()\n\n        # 畳み込み層1\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, padding=1,stride=1)  # 出力サイズ: 96×96\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 48×48\n\n        # 畳み込み層2\n        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1,stride=1)  # 出力サイズ: 48*48\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 24×24\n\n        # 畳み込み層3\n        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1,stride=1)  # 出力サイズ: 24*24\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 12×12\n\n        # 全結合層\n        self.fc1 = nn.Linear(128 * 12 * 12, 128*12)  # 畳み込み後のサイズを考慮\n        self.fc2 = nn.Linear(128*12, 128)\n        self.fc3 = nn.Linear(128, output_unit)\n        \n        # Dropout 層を追加（ドロップアウト率 0.5）\n        self.dropout = nn.Dropout(p=0.5)\n        \n    def forward(self, x):\n        # 畳み込み層1と活性化関数とプーリング\n        x1 = F.relu(self.conv1(x))\n        x1_pooled = self.pool1(x1)\n\n        # 畳み込み層2と活性化関数とプーリング\n        x2 = F.relu(self.conv2(x1_pooled))\n        x2_pooled = self.pool2(x2)\n\n        # 畳み込み層3と活性化関数とプーリング\n        x3 = F.relu(self.conv3(x2_pooled))\n        x3_pooled = self.pool3(x3)\n        \n        # フラット化\n        x_flat = x3_pooled.view(-1, 128 * 12 * 12)  # Flatten the tensor\n        \n        # 全結合層と活性化関数 + Dropout\n        x_fc1 = F.relu(self.fc1(x_flat))\n        x_fc1 = self.dropout(x_fc1)  # Dropoutを適用\n        \n        x_fc2 = F.relu(self.fc2(x_fc1))\n        x_fc2 = self.dropout(x_fc2)  # Dropoutを適用\n        \n        x_out = F.relu(self.fc3(x_fc2))\n        \n        return x_out","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# クラス定義、FFILLと同じ\n\nclass CNNModel(nn.Module):\n    def __init__(self):\n        super(CNNModel, self).__init__()\n        \n        # 畳み込み層1\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3) # output_size = (96-3)/1+1=94\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2) # output_size = 94/2=47\n        \n        # 畳み込み層2\n        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3)# output_size = (47-3)/1+1=45\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)# output_size = 45/22\n        \n        # 畳み込み層3\n        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3)# output_size = (22-3)/1+1=20\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)# output_size = 20/2=10\n        \n        # Dropout 層を追加（ドロップアウト率 0.5）\n        self.dropout = nn.Dropout(p=0.5)\n        \n        # 全結合層\n        self.fc1 = nn.Linear(128 * 10 * 10, 500)  # 畳み込み後の画像サイズを計算 (128, 10, 10)\n        self.fc2 = nn.Linear(500, 500)\n        self.fc3 = nn.Linear(500, 30)\n    \n    def forward(self, x):\n        # 畳み込み層と活性化関数とプーリング\n        x = self.pool1(F.relu(self.conv1(x)))\n        x = self.pool2(F.relu(self.conv2(x)))\n        x = self.pool3(F.relu(self.conv3(x)))\n        \n        # フラット化\n        x = x.view(-1, 128 * 10 * 10)  # Flatten the tensor\n        \n        # 全結合層と活性化関数 + Dropout\n        x = F.relu(self.fc1(x))\n        x = self.dropout(x)  # Dropoutを適用\n        \n        x = F.relu(self.fc2(x))\n        x = self.dropout(x)  # Dropoutを適用\n        \n        x = self.fc3(x)  # 最後の層では出力層に活性化関数を適用しない\n        \n        return x","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_test=np.empty((1783,96,96,1))\nfor i in range(1783):\n    test0=test[\"Image\"][i].split(\" \")\n    test1=[int(x) for x in test0]\n    test2=np.array(test1,dtype=\"float\")\n    test3=test2.reshape(96,96,1)    \n    x_test[i]=test3","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# データを8:2に分割する\nprint(\"元データ\",train_droped.shape)\ntrain_data, val_data = train_test_split(\n    train_droped,test_size=0.2, random_state=42\n)\nprint(\"分割後\",train_data.shape,val_data.shape)\n\n# DA\ntrain_data = augment_data(train_data)\nval_data = augment_data(val_data)\n\n# 0<x<96になるように削除\ntrain_data=delete_rows(train_data)\nval_data = delete_rows(val_data)\nprint(\"DA後\",train_data.shape,val_data.shape)\n\n# もし x_train と y_train_filled が NumPy 配列やリストの場合、それをテンソルに変換\nx_train = torch.tensor(train_data[\"Image\"]/255, dtype=torch.float32)\ny_train = torch.tensor(np.array(train_data.drop(\"Image\",axis=1)), dtype=torch.float32)\n\nx_val = torch.tensor(val_data[\"Image\"]/255, dtype=torch.float32)\ny_val = torch.tensor(np.array(val_data.drop(\"Image\",axis=1)), dtype=torch.float32)\n\nx_test_ten  = torch.tensor(x_test/255, dtype=torch.float32)\n\n# (7049, 96, 96, 1) -> (7049, 1, 96, 96) に変換\nx_train = x_train.unsqueeze(1)\nx_val   = x_val.unsqueeze(1)\nx_test_ten = x_test_ten.permute(0, 3, 1, 2)\n\nprint(x_train.shape,x_val.shape, x_test_ten.shape)\n\n# データセットとデータローダーの作成\ntrain_dataset = TensorDataset(x_train, y_train)\ntrain_loader  = DataLoader(train_dataset, batch_size=32, shuffle=True)\ntest_loader   = DataLoader(x_test_ten, batch_size=1, shuffle=False)\n\nval_loader    = DataLoader(TensorDataset(x_val, y_val), batch_size=1, shuffle=False)\nprint(\"FIN\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 可視化\ntrain_data_plt = train_data.drop(\"Image\",axis=1).columns\n# 2つずつペアにしてループ処理\nfor x, y in zip(train_data_plt[::2], train_data_plt[1::2]):\n    print(f\"x: {x}, y: {y}\")\n    \n    # x, y座標をそれぞれtrain_dataとval_dataから取得\n    x_coords_train = train_data[x]\n    y_coords_train = train_data[y]\n\n    x_coords_val = val_data[x]\n    y_coords_val = val_data[y]\n\n    # 1行に2枚のプロットを表示するためのサブプロットを作成\n    fig, axs = plt.subplots(1, 2, figsize=(12, 6))\n\n    # 左側: train_dataの2次元ヒストグラム\n    h1 = axs[0].hist2d(x_coords_train, y_coords_train, bins=50, cmap='Blues')\n    fig.colorbar(h1[3], ax=axs[0], label='Counts')\n    axs[0].set_xlabel('X Coordinate')\n    axs[0].set_ylabel('Y Coordinate')\n    axs[0].set_title('2D Histogram of Train Data')\n\n    # 右側: val_dataの2次元ヒストグラム\n    h2 = axs[1].hist2d(x_coords_val, y_coords_val, bins=50, cmap='Blues')\n    fig.colorbar(h2[3], ax=axs[1], label='Counts')\n    axs[1].set_xlabel('X Coordinate')\n    axs[1].set_ylabel('Y Coordinate')\n    axs[1].set_title('2D Histogram of Val Data')\n\n    # グラフを表示\n    plt.tight_layout()\n    plt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# デバイスの設定\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# モデルのインスタンスを作成し、デバイスに移動\nmodel = CNNModel(30).to(device)\n\n# 損失関数と最適化アルゴリズム\ncriterion = nn.MSELoss()  # 平均二乗誤差損失関数\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# スケジューラの設定\nscheduler = lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.75)\n\n# アーリーストッピングの設定\nearly_stopping_patience = 6  # 5エポック改善がなければストップ\nmin_val_loss = np.inf\nepochs_no_improve = 0\n\n# 学習曲線を描くためのリスト\ntrain_losses = []\nval_losses = []  # バリデーション損失を記録するリスト\n\n# 学習ループ\nnum_epochs = 20\nfor epoch in range(num_epochs):\n    model.train()  # 訓練モード\n    running_loss = 0.0\n    \n    # tqdmを使って進捗バーを表示\n    for i, (inputs, targets) in enumerate(train_loader):\n        inputs, targets = inputs.to(device), targets.to(device)  # デバイスに転送\n        optimizer.zero_grad()  # 勾配の初期化\n        \n        # 順伝播\n        outputs = model(inputs)\n        loss = criterion(outputs, targets)\n        \n        # 逆伝播と最適化\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n    \n    # エポックごとの平均損失を記録\n    epoch_loss = running_loss / len(train_loader)\n    train_losses.append(epoch_loss)\n    \n    # バリデーションデータでの評価\n    model.eval()  # 評価モード\n    val_running_loss = 0.0\n    \n    with torch.no_grad():  # 勾配計算を無効にする\n        for inputs, targets in val_loader:\n            inputs, targets = inputs.to(device), targets.to(device)  # デバイスに転送\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            val_running_loss += loss.item()\n    \n    val_epoch_loss = val_running_loss / len(val_loader)  # バリデーションの平均損失\n    val_losses.append(val_epoch_loss)\n    \n    \n\n    \n    \n    # アーリーストッピングの判定\n    if val_epoch_loss < min_val_loss:\n        min_val_loss = val_epoch_loss\n        epochs_no_improve = 0\n    else:\n        epochs_no_improve += 1\n    \n    if epochs_no_improve == early_stopping_patience: \n        print(\"Early stopping\")\n        break\n        \n    # 現在の学習率を表示（オプション）\n    current_lr = scheduler.get_last_lr()[0]\n    print(f'Epoch {epoch+1}/{num_epochs}, Learning Rate: {current_lr}, Train Loss: {epoch_loss:.4f}, Val Loss: {val_epoch_loss:.4f}, epochs_no_improve:{epochs_no_improve}')\n    \n    # 学習率の更新\n    scheduler.step()\nprint(\"FIN\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 学習曲線の描画\nprint(\"glf\")\nplt.plot(train_losses, label='Training Loss')\nplt.plot(val_losses, label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\n# plt.yscale('log')\n# plt.ylim(0, 200)\nplt.title('Loss Curve')\nplt.legend()\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.eval()\n\n# テスト時は勾配を計算しないようにするため、torch.no_grad()を使う\nwith torch.no_grad():\n    # テストデータをバッチごとにループ\n    for i, inputs in enumerate(test_loader):  # バッチサイズ1なので(inputs,)とします\n        inputs_ = inputs.to(device)  # デバイスに移動\n        \n        # モデルに入力データを渡して予測を取得\n        outputs = model(inputs_)\n        print(outputs.detach().cpu().numpy())\n        viewer(inputs.squeeze().cpu().numpy(), outputs.detach().cpu().numpy()[0])  # 余分な次元を削除\n        if i>20:\n            break","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## ファインチューニング","metadata":{}},{"cell_type":"code","source":"model","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 入力サイズを指定（例えば、入力が1チャネルの96x96の画像の場合）\nprint(summary(model, input_size=(1, 96, 96)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def print_weight_updates(model):\n    for name, param in model.named_parameters():\n        print(f'{name:<20}: {\"Update\" if param.requires_grad else \"No\"}')\n\n# 使用例\nprint_weight_updates(model)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#　畳み込み層の追加無し\n\n# 畳み込み層1〜5の重みを固定する関数\ndef freeze_layers(model):\n    for param in model.conv1.parameters():\n        param.requires_grad = False\n    for param in model.conv2.parameters():\n        param.requires_grad = False\n    for param in model.conv3.parameters():\n        param.requires_grad = False\n    for param in model.conv4.parameters():\n        param.requires_grad = False\n    for param in model.conv5.parameters():\n        param.requires_grad = False\n    return model\n\n# 出力層を新しい出力ユニット数に変更する関数\ndef change_output_layer(model, new_output_unit):\n    # 全結合層を再定義し、新しい出力ユニット数を設定\n    model.fc1 = nn.Linear(1024 * 3 * 3, 1024 * 3)\n    model.bn_fc1 = nn.BatchNorm1d(1024 * 3)  # バッチノーマライゼーションの再定義も必要\n    model.fc2 = nn.Linear(1024 * 3, 1024)\n    model.fc3 = nn.Linear(1024, new_output_unit)\n    return model","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def view_2Dhist(df):\n    \n    for i in range(0,df.shape[1]-1, 2):\n        \n        # 2次元ヒストグラムを作成するための新しい図を作成\n        fig, ax = plt.subplots(figsize=(5, 5))\n        x = df.iloc[:, i]      # x座標（偶数列）\n        y = df.iloc[:, i + 1]  # y座標（奇数列）\n\n        \n        # 左側: 2次元ヒストグラム\n        h1 = ax.hist2d(x, y, bins=50, cmap='Blues')\n        \n        # カラーバーの追加\n        fig.colorbar(h1[3], ax=ax, label='Counts')\n        \n        ax.set_xlabel('X Coordinate')\n        ax.set_ylabel('Y Coordinate')\n        ax.set_title('2D Histogram of Train Data')\n\n        # グラフを表示\n        plt.tight_layout()\n        plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"group = [['Image', 'nose_tip_x', 'nose_tip_y'], ['Image', 'left_eye_center_x', 'left_eye_center_y'], ['Image', 'right_eye_center_x', 'right_eye_center_y'], ['Image', 'left_eye_inner_corner_x', 'left_eye_inner_corner_y', 'left_eye_outer_corner_x', 'left_eye_outer_corner_y', 'right_eye_inner_corner_x', 'right_eye_inner_corner_y', 'right_eye_outer_corner_x', 'right_eye_outer_corner_y', 'left_eyebrow_inner_end_x', 'left_eyebrow_inner_end_y', 'left_eyebrow_outer_end_x', 'left_eyebrow_outer_end_y', 'right_eyebrow_inner_end_x', 'right_eyebrow_inner_end_y', 'right_eyebrow_outer_end_x', 'right_eyebrow_outer_end_y', 'mouth_left_corner_x', 'mouth_left_corner_y', 'mouth_right_corner_x', 'mouth_right_corner_y', 'mouth_center_top_lip_x', 'mouth_center_top_lip_y'], ['Image', 'mouth_center_bottom_lip_x', 'mouth_center_bottom_lip_y']]\ngroup","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 画像のリシェイプ関数を定義\ndef str_to_image(image_str, img_size=96):\n    # 文字列を数値リストに変換\n    pixel_values = list(map(int, image_str.split()))\n    # 96x96にリシェイプ\n    return np.array(pixel_values).reshape(img_size, img_size)\n\n# 各行に対してリシェイプ操作を行う\ntrain['Image'] = train['Image'].apply(lambda x: str_to_image(x))/255\nprint(\"FIN\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# groupごとに学習を行う\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nfor labels in group:\n    print(\"変形\",labels)\n    y_train_filled_fine = train[labels].dropna()\n    x_train_fine = y_train_filled_fine[\"Image\"]\n    y_train_filled_fine = y_train_filled_fine.drop(['Image'],axis=1)\n    print(\"size_ratio\", len(y_train_filled_fine)/len(train))\n    print(f\"size:{len(y_train_filled_fine)}/{len(train)}\")\n    \n    view_2Dhist(y_train_filled_fine)\n    \n    y_train_filled_fine = torch.tensor(np.array(y_train_filled_fine), dtype=torch.float32) #処理後の目的変数\n    x_train_fine = torch.tensor(x_train_fine, dtype=torch.float32)# train用の画像\n    \n    # (7049, 96, 96, 1) -> (7049, 1, 96, 96) に変換\n    x_train_fine = x_train_fine.unsqueeze(1)\n#     x_train_fine = x_train_fine.permute(0, 3, 1, 2)\n#     print(f'x_train_fine shape: {x_train_fine.shape}')  # (7049, 1, 96, 96) のように出力されるべき\n    \n    # データを8:2に分割する\n    x_train_fine_split, x_val_fine_split, y_train_fine_split, y_val_fine_split = train_test_split(\n        x_train_fine, y_train_filled_fine, test_size=0.2, random_state=42\n    )\n    \n    \n    # データセットとデータローダーの作成\n    train_dataset_fine = TensorDataset(x_train_fine_split, y_train_fine_split)\n    train_loader_fine  = DataLoader(train_dataset_fine, batch_size=32, shuffle=True)\n    val_loader_fine    = DataLoader(TensorDataset(x_val_fine_split, y_val_fine_split), batch_size=1, shuffle=False)\n\n    # 出力数をunit_numに変更\n    unit_num=len(labels)-1\n    \n    # 事前学習したモデルに層を追加\n    model_fine = change_output_layer(model, new_output_unit=unit_num).to(device)\n    model = freeze_layers(model)  # 畳み込み層1〜5の重みを固定\n    \n    # modelアーキテクチャを表示\n    print_weight_updates(model_fine)\n    print(summary(model_fine, input_size=(1, 96, 96)))\n    \n    \n    # optimizerを全結合層のパラメータのみを指定\n    optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model_fine.parameters()), lr=0.005)\n    \n    # スケジューラの設定\n    scheduler = lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.75)\n    \n    # 損失関数と最適化アルゴリズム\n    criterion = nn.MSELoss()  # 平均二乗誤差損失関数\n\n    # アーリーストッピングの設定\n    early_stopping_patience = 7  # 5エポック改善がなければストップ\n    min_val_loss = np.inf\n    epochs_no_improve = 0\n\n    # 学習曲線を描くためのリスト\n    train_losses = []\n    val_losses = []  # バリデーション損失を記録するリスト\n\n    # 学習ループ\n    print(\"train\",labels)\n    num_epochs = 10\n    for epoch in range(num_epochs):\n        model_fine.train()  # 訓練モード\n        running_loss = 0.0\n\n        for i, (inputs, targets) in enumerate(train_loader_fine):\n            inputs, targets = inputs.to(device), targets.to(device)  # GPUに移動\n            optimizer.zero_grad()  # 勾配の初期化\n            \n#             print(inputs.shape)\n\n            # 順伝播\n            outputs = model_fine(inputs)\n            loss = criterion(outputs, targets)\n\n            # 逆伝播と最適化\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item()\n\n        # エポックごとの平均損失を記録\n        epoch_loss = running_loss / len(train_loader)\n        train_losses.append(epoch_loss)\n\n        # バリデーションデータでの評価\n        model_fine.eval()  # 評価モード\n        val_running_loss = 0.0\n\n        with torch.no_grad():  # 勾配計算を無効にする\n            for inputs, targets in val_loader_fine:\n                inputs, targets = inputs.to(device), targets.to(device)  # GPUに移動\n                outputs = model_fine(inputs)\n                loss = criterion(outputs, targets)\n                val_running_loss += loss.item()\n\n        val_epoch_loss = val_running_loss / len(val_loader)  # バリデーションの平均損失\n        val_losses.append(val_epoch_loss)\n\n\n\n        # アーリーストッピングの判定\n        if val_epoch_loss < min_val_loss:\n            min_val_loss = val_epoch_loss\n            epochs_no_improve = 0\n        else:\n            epochs_no_improve += 1\n\n        if epochs_no_improve == early_stopping_patience:\n            print(\"Early stopping\")\n            break\n        \n    # 現在の学習率を表示（オプション）\n    current_lr = scheduler.get_last_lr()[0]\n    print(f'Epoch {epoch+1}/{num_epochs}, Learning Rate: {current_lr}, Train Loss: {epoch_loss:.4f}, Val Loss: {val_epoch_loss:.4f}, epochs_no_improve:{epochs_no_improve}')\n    \n    # 学習率の更新\n    scheduler.step()\n    \n    # 学習曲線の描画\n    print(\"glf\",labels)\n    plt.plot(train_losses, label='Training Loss')\n    plt.plot(val_losses, label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.yscale('log')\n    plt.title('Loss Curve')\n    plt.legend()\n    plt.show()\n    \n    print(\"test\")\n    # test\n    # モデルを評価モードに切り替え\n    model_fine.eval()\n    \n    # テスト時は勾配を計算しないようにするため、torch.no_grad()を使う\n    with torch.no_grad():\n        # \"Image\"をlabelsから削除\n        labels_ = [label for label in labels if label != 'Image']\n        test[labels_] = 0\n#         print(test.head())\n        \n        # テストデータをバッチごとにループ\n        for i, inputs in enumerate(test_loader):\n            inputs = inputs.to(device)  # GPUに移動\n            # モデルに入力データを渡して予測を取得\n            outputs = model_fine(inputs)\n\n            # 予測結果をリストに追加\n            test.loc[i, labels_] = outputs.detach().cpu().numpy()\n            \n#             if i<5:\n#                 print(inputs)\n#                 print(outputs.detach().cpu().numpy())\n#                 print(test.head(5))\nprint(\"FIN\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.head(10)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_fine","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 提出","metadata":{}},{"cell_type":"code","source":"# 結果を確認\nprint(IdL.isnull().sum())\n\n# 'ImageID' と 'FeatureName' に基づいて、2次元表から値を取り出して 'Location' に格納\nfor idx, row in IdL.iterrows():\n    image_id = row['ImageId']-1\n    feature_name = row['FeatureName']\n    \n    # 2次元表(pivot_table)から、対応する 'ImageID' と 'FeatureName' の値を取得\n    value = test.loc[image_id, feature_name]\n    \n    # 'Location' 列に値を格納\n    IdL.at[idx, 'Location'] = value\n\n\n# 結果を確認\nprint(IdL.isnull().sum())\nprint(IdL.head())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"IdL = IdL.drop(['ImageId',\"FeatureName\"],axis=1)\n\nIdL.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"IdL[\"Location\"].max(), IdL[\"Location\"].min()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# CSVファイルに出力（インデックスなし）\nIdL.to_csv('submission_ffill_6.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 列ごとに予測、DA","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/training.zip\")\ntest  = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/test.zip\")\nIdL   = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/IdLookupTable.csv\")\nsamp  = pd.read_csv(\"/kaggle/input/facial-keypoints-detection/SampleSubmission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:00:08.143737Z","iopub.execute_input":"2024-10-28T02:00:08.144524Z","iopub.status.idle":"2024-10-28T02:00:12.998309Z","shell.execute_reply.started":"2024-10-28T02:00:08.144481Z","shell.execute_reply":"2024-10-28T02:00:12.997168Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"group = [['Image', 'nose_tip_x', 'nose_tip_y'], ['Image', 'left_eye_center_x', 'left_eye_center_y'], ['Image', 'right_eye_center_x', 'right_eye_center_y'], ['Image', 'left_eye_inner_corner_x', 'left_eye_inner_corner_y', 'left_eye_outer_corner_x', 'left_eye_outer_corner_y', 'right_eye_inner_corner_x', 'right_eye_inner_corner_y', 'right_eye_outer_corner_x', 'right_eye_outer_corner_y', 'left_eyebrow_inner_end_x', 'left_eyebrow_inner_end_y', 'left_eyebrow_outer_end_x', 'left_eyebrow_outer_end_y', 'right_eyebrow_inner_end_x', 'right_eyebrow_inner_end_y', 'right_eyebrow_outer_end_x', 'right_eyebrow_outer_end_y', 'mouth_left_corner_x', 'mouth_left_corner_y', 'mouth_right_corner_x', 'mouth_right_corner_y', 'mouth_center_top_lip_x', 'mouth_center_top_lip_y'], ['Image', 'mouth_center_bottom_lip_x', 'mouth_center_bottom_lip_y']]\ngroup","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:00:13.000312Z","iopub.execute_input":"2024-10-28T02:00:13.000938Z","iopub.status.idle":"2024-10-28T02:00:13.009839Z","shell.execute_reply.started":"2024-10-28T02:00:13.000891Z","shell.execute_reply":"2024-10-28T02:00:13.008847Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"[['Image', 'nose_tip_x', 'nose_tip_y'],\n ['Image', 'left_eye_center_x', 'left_eye_center_y'],\n ['Image', 'right_eye_center_x', 'right_eye_center_y'],\n ['Image',\n  'left_eye_inner_corner_x',\n  'left_eye_inner_corner_y',\n  'left_eye_outer_corner_x',\n  'left_eye_outer_corner_y',\n  'right_eye_inner_corner_x',\n  'right_eye_inner_corner_y',\n  'right_eye_outer_corner_x',\n  'right_eye_outer_corner_y',\n  'left_eyebrow_inner_end_x',\n  'left_eyebrow_inner_end_y',\n  'left_eyebrow_outer_end_x',\n  'left_eyebrow_outer_end_y',\n  'right_eyebrow_inner_end_x',\n  'right_eyebrow_inner_end_y',\n  'right_eyebrow_outer_end_x',\n  'right_eyebrow_outer_end_y',\n  'mouth_left_corner_x',\n  'mouth_left_corner_y',\n  'mouth_right_corner_x',\n  'mouth_right_corner_y',\n  'mouth_center_top_lip_x',\n  'mouth_center_top_lip_y'],\n ['Image', 'mouth_center_bottom_lip_x', 'mouth_center_bottom_lip_y']]"},"metadata":{}}]},{"cell_type":"markdown","source":"## 列ごと、定義","metadata":{}},{"cell_type":"code","source":"def adjust_brightness(image, brightness_factor=1.0,beta_factor=0):\n    # 輝度を調整する関数\n    ad_image = cv2.convertScaleAbs(image, alpha=brightness_factor, beta=beta_factor)\n    return ad_image\n\ndef scale_image_and_landmarks(image, landmarks, scale_factor):\n    # 画像とランドマークをスケーリングする関数\n    h, w = image.shape[:2]\n    scaled_image = cv2.resize(image, (0, 0), fx=scale_factor, fy=scale_factor)\n    scaled_landmarks = landmarks * scale_factor\n\n    # 画像の中心に合わせてスケーリング結果を切り抜く、またはパディング\n    if scale_factor > 1:\n        new_h, new_w = scaled_image.shape[:2]\n        y_offset = (new_h - h) // 2\n        x_offset = (new_w - w) // 2\n        scaled_image = scaled_image[y_offset:y_offset + h, x_offset:x_offset + w]\n        scaled_landmarks -= [x_offset, y_offset]\n    else:\n        padded_image = np.zeros((h, w), dtype=image.dtype)\n        y_offset = (h - scaled_image.shape[0]) // 2\n        x_offset = (w - scaled_image.shape[1]) // 2\n        padded_image[y_offset:y_offset + scaled_image.shape[0], x_offset:x_offset + scaled_image.shape[1]] = scaled_image\n        scaled_image = padded_image\n        scaled_landmarks += [x_offset, y_offset]\n\n    return scaled_image, scaled_landmarks.flatten()\n\n\n\ndef rotate_image_and_landmarks(image, landmarks, angle):\n    # 画像の中心を軸に回転\n    h, w = image.shape[:2]\n    center = (w / 2, h / 2)\n    \n    # 回転行列を取得\n    rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)\n    \n    # 画像を回転（欠損ピクセルを最も近いピクセルで埋める）\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REPLICATE)\n    \n    # ランドマークを回転\n    cos_a = np.cos(np.radians(angle))\n    sin_a = np.sin(np.radians(angle))\n    rotation_matrix_landmarks = np.array([[cos_a, -sin_a], [sin_a, cos_a]])\n    \n    # ランドマーク座標の中心を画像の中心に合わせて回転\n    rotated_landmarks = np.dot(landmarks - np.array([w / 2, h / 2]), rotation_matrix_landmarks) + np.array([w / 2, h / 2])\n\n    return rotated_image, rotated_landmarks.flatten()\n\ndef shift_image_and_landmarks(image, landmarks, shift_x, shift_y):\n    h, w = image.shape[:2]  # 画像の高さと幅\n    # 平行移動行列を作成\n    translation_matrix = np.float32([[1, 0, shift_x], [0, 1, shift_y]])\n    # OpenCVを使って画像を平行移動\n    shifted_image = cv2.warpAffine(image, translation_matrix, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REPLICATE)\n    # ランドマークも平行移動\n    shifted_landmarks = landmarks + np.array([shift_x, shift_y])\n    \n    return shifted_image, shifted_landmarks.flatten()\n\ndef add_noise(image, noise_factor=0.05):\n    # 画像にノイズを加える\n    img_array = image / 255.0\n    noise = np.random.normal(loc=0, scale=noise_factor, size=img_array.shape)\n    noisy_image = np.clip(img_array + noise, 0, 1) * 255\n\n    return noisy_image.astype(np.uint8)\n\ndef DA_module(image, landmarks):\n    \"\"\"\n    image:2次元を想定\n    landmarks:2次を想定\n    \n    やることリスト\n    angle:角度を変更\n    shift:水平垂直に移動\n    scale:スケールを変更\n    brightness:輝度変更\n    noise:ノイズ付加\n    \"\"\"\n    \n    # angle\n    angle = int(np.random.uniform(-20, 20))  # -30から30の範囲からサンプリング\n    image, landmarks = rotate_image_and_landmarks(image, landmarks, angle)\n    \n    # shift\n    shift_x = int(np.random.uniform(-10, 10))  # -10から10の範囲からサンプリング\n    shift_y = int(np.random.uniform(-10, 10))  # -10から10の範囲からサンプリング\n    image, landmarks = shift_image_and_landmarks(image, landmarks.reshape(-1, 2), shift_x, shift_y)\n    \n    # スケール変更\n    scale_factor = np.random.uniform(0.9, 1.1)\n    image, landmarks = scale_image_and_landmarks(image, landmarks.reshape(-1, 2), scale_factor)\n    \n    # 輝度調節\n    brightness_factor = np.random.uniform(0.8, 1.2)\n    beta_factor = np.random.uniform(-20,+20)\n    image = adjust_brightness(image, brightness_factor,beta_factor)\n    \n    #noise\n    noise_factor = np.random.uniform(0.01, 0.05)\n    image        = add_noise(image, noise_factor)\n    \n    return image, landmarks.flatten()\n\n# ガウス分布から値を生成する関数\ndef sample_from_gaussian(mu, sigma):\n    return np.random.normal(mu, sigma)\n\ndef viewer(input_,ans_coords):\n#      = df[\"Image\"]\n#      = df.drop(\"Image\")\n    # プロットのために特徴点のx, y座標を分割\n    x_ans_coords = ans_coords[0::2]  # x座標\n    y_ans_coords = ans_coords[1::2]  # y座標\n\n    # 可視化\n    # 入力データの一つを表示 (ここでは画像データを想定)\n    plt.imshow(input_,cmap='gray')  # 入力データの形状に応じて適宜変更\n    plt.scatter(x_ans_coords, y_ans_coords, color='blue', s=20)  # 特徴点を赤い点で表示\n    plt.show()\n    \ndef delete_rows(df):\n    size_before = df.shape[0]\n    coord_columns = [col for col in df.columns if col!=\"Image\"]\n    \n     # 各座標が0 < x < 96 の条件に合うかどうかを確認\n    mask = (df[coord_columns] > 0) & (df[coord_columns] < 96)\n    \n    # 全ての座標が条件を満たしている行のみ残す\n    df_filtered = df[mask.all(axis=1)]\n    print(\"削除した行数\",-df_filtered.shape[0]+size_before, \"全体\",size_before)\n    \n    return df_filtered","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:00:13.011520Z","iopub.execute_input":"2024-10-28T02:00:13.011978Z","iopub.status.idle":"2024-10-28T02:00:13.037348Z","shell.execute_reply.started":"2024-10-28T02:00:13.011934Z","shell.execute_reply":"2024-10-28T02:00:13.036494Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# 変更後\ndef augment_data(df, mul=10):\n    augmented_images = []\n    augmented_landmarks = []\n    labels = df.drop(\"Image\",axis=1).columns\n    \n    for index, row in tqdm(df.iterrows(), total=df.shape[0], desc=\"DA\"):\n        landmarks = row.drop(\"Image\").to_numpy()\n        image = row[\"Image\"]\n        landmarks_re = np.array(landmarks).reshape(-1, 2)\n\n        for _ in range(mul):\n            noisy_image, shift_rotate_landmarks = DA_module(image, landmarks_re)\n            augmented_images.append(noisy_image)\n            augmented_landmarks.append(shift_rotate_landmarks) \n\n    # 新しいデータフレームを作成\n    augmented_df = pd.DataFrame({'Image': augmented_images})\n    for ind, label in enumerate(labels):\n        augmented_df[label] = [lm[ind] for lm in augmented_landmarks]\n    df_augmented = pd.concat([df, augmented_df], ignore_index=True)\n    return df_augmented","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:00:13.038881Z","iopub.execute_input":"2024-10-28T02:00:13.039171Z","iopub.status.idle":"2024-10-28T02:00:13.051821Z","shell.execute_reply.started":"2024-10-28T02:00:13.039140Z","shell.execute_reply":"2024-10-28T02:00:13.051059Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"class CNNModel(nn.Module):\n    def __init__(self, output_unit):\n        super(CNNModel, self).__init__()\n\n        # 畳み込み層1\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, padding=1)  # 出力サイズ: 96×96\n        self.bn1 = nn.BatchNorm2d(32)\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 48×48\n        self.dropout1 = nn.Dropout(p=0.5)\n\n        # 畳み込み層2\n        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1)  # 出力サイズ: 48×48\n        self.bn2 = nn.BatchNorm2d(64)\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 24×24\n        self.dropout2 = nn.Dropout(p=0.5)\n\n        # 畳み込み層3\n        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1)  # 出力サイズ: 24×24\n        self.bn3 = nn.BatchNorm2d(128)\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 12×12\n        self.dropout3 = nn.Dropout(p=0.5)\n\n        # 畳み込み層4\n        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1)  # 出力サイズ: 12×12\n        self.bn4 = nn.BatchNorm2d(256)\n        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 6×6\n        self.dropout4 = nn.Dropout(p=0.5)\n\n        # 畳み込み層5\n        self.conv5 = nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, padding=1)  # 出力サイズ: 6×6\n        self.bn5 = nn.BatchNorm2d(512)\n        self.pool5 = nn.MaxPool2d(kernel_size=2, stride=2)  # 出力サイズ: 3×3\n        self.dropout5 = nn.Dropout(p=0.5)\n\n        # 畳み込み層6\n        self.conv6 = nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=3, padding=1)  # 出力サイズ: 3×3\n        self.bn6 = nn.BatchNorm2d(1024)\n        self.dropout6 = nn.Dropout(p=0.5)\n\n        # 全結合層\n        self.fc1 = nn.Linear(1024 * 3 * 3, 1024 * 3)  # 畳み込み後のサイズを考慮\n        self.bn_fc1 = nn.BatchNorm1d(1024 * 3)  # 全結合層1のバッチノーマライゼーション\n        self.fc2 = nn.Linear(1024 * 3, 1024)\n        self.fc3 = nn.Linear(1024, output_unit)\n\n        # 全結合層用 Dropout\n        self.dropout_fc = nn.Dropout(p=0.5)\n        \n    def forward(self, x):\n        # 畳み込み層1とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout1(self.pool1(F.relu(self.bn1(self.conv1(x)))))\n\n        # 畳み込み層2とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout2(self.pool2(F.relu(self.bn2(self.conv2(x)))))\n\n        # 畳み込み層3とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout3(self.pool3(F.relu(self.bn3(self.conv3(x)))))\n\n        # 畳み込み層4とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout4(self.pool4(F.relu(self.bn4(self.conv4(x)))))\n\n        # 畳み込み層5とバッチノーマライゼーション、活性化関数、プーリング、ドロップアウト\n        x = self.dropout5(self.pool5(F.relu(self.bn5(self.conv5(x)))))\n        \n        # 畳み込み層6とバッチノーマライゼーション、活性化関数、ドロップアウト\n        x = self.dropout6(F.relu(self.bn6(self.conv6(x))))\n\n        # フラット化\n        x = x.view(-1, 1024 * 3 * 3)\n\n        # 全結合層1にバッチノーマライゼーションとドロップアウト\n        x = self.dropout_fc(F.relu(self.bn_fc1(self.fc1(x))))\n\n        # 全結合層2とドロップアウト\n        x = self.dropout_fc(F.relu(self.fc2(x)))\n\n        # 出力層\n        x = self.fc3(x)\n\n        return x\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:00:14.722294Z","iopub.execute_input":"2024-10-28T02:00:14.722699Z","iopub.status.idle":"2024-10-28T02:00:14.742332Z","shell.execute_reply.started":"2024-10-28T02:00:14.722650Z","shell.execute_reply":"2024-10-28T02:00:14.741393Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"train[\"Image\"] = train[\"Image\"].apply(lambda x:np.array([num for num in x.split(\" \")], dtype=np.uint8).reshape(96,96))\ntest[\"Image\"]  = test[\"Image\"].apply(lambda x:np.array([num for num in x.split(\" \")], dtype=np.uint8).reshape(96,96)/255)","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:00:18.993486Z","iopub.execute_input":"2024-10-28T02:00:18.994366Z","iopub.status.idle":"2024-10-28T02:00:35.780875Z","shell.execute_reply.started":"2024-10-28T02:00:18.994323Z","shell.execute_reply":"2024-10-28T02:00:35.780020Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"x_test = torch.tensor(test[\"Image\"], dtype=torch.float32).unsqueeze(1) #処理後の目的変数\ntest_loader = DataLoader(x_test, batch_size=1, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:00:35.782381Z","iopub.execute_input":"2024-10-28T02:00:35.782754Z","iopub.status.idle":"2024-10-28T02:00:39.925988Z","shell.execute_reply.started":"2024-10-28T02:00:35.782718Z","shell.execute_reply":"2024-10-28T02:00:39.924928Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"## 列ごと、DA, train","metadata":{}},{"cell_type":"code","source":"# groupごとに学習を行う\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nfor labels in group:\n    ########\n    #data\n    ########\n    print(\"変形\",labels)\n    train_group = train[labels].dropna()\n    \n    # データを8:2に分割する\n    train_group,  val_group = train_test_split(\n        train_group, test_size=0.2, random_state=42\n    )\n    \n    # DA\n    DA_mul = 15000//train_group.shape[0]-1\n    train_group = augment_data(train_group,DA_mul)\n    val_group = augment_data(val_group,DA_mul)\n    print(f\"DA:{1+DA_mul}倍\",train_group.shape,val_group.shape)\n    \n    # 0<x<96になるように削除\n    train_group=delete_rows(train_group)\n    val_group = delete_rows(val_group)\n    print(\"delete\",train_group.shape,val_group.shape)\n    \n    print(\"make_dataloader\")\n    x_train_fine = train_group[\"Image\"]/255\n    y_train_filled_fine = train_group.drop(['Image'],axis=1)\n    x_val_fine_split = val_group[\"Image\"]/255\n    y_val_fine_split = val_group.drop(['Image'],axis=1)\n#     print(\"size_ratio\", len(y_train_filled_fine)/len(train))\n#     print(f\"size:{len(y_train_filled_fine)}/{len(train)}\")\n    del train_group\n    del val_group\n    \n    y_train_filled_fine = torch.tensor(np.array(y_train_filled_fine), dtype=torch.float32) #処理後の目的変数\n    x_train_fine = torch.tensor(x_train_fine, dtype=torch.float32)# train用の画像\n    y_val_fine_split = torch.tensor(np.array(y_val_fine_split), dtype=torch.float32) #処理後の目的変数\n    x_val_fine_split = torch.tensor(x_val_fine_split, dtype=torch.float32)# train用の画像\n    \n    # (7049, 96, 96, 1) -> (7049, 1, 96, 96) に変換\n    x_train_fine     =     x_train_fine.unsqueeze(1)\n    x_val_fine_split = x_val_fine_split.unsqueeze(1)\n    \n    # データセットとデータローダーの作成\n    train_loader_fine  = DataLoader(TensorDataset(x_train_fine, y_train_filled_fine), batch_size=32, shuffle=True)\n    val_loader_fine    = DataLoader(TensorDataset(x_val_fine_split, y_val_fine_split), batch_size=1, shuffle=False)\n    \n    #######\n    # model\n    #######\n    # 出力数をunit_numに変更\n    unit_num=len(labels)-1\n    \n    # 事前学習したモデルに層を追加\n    model = CNNModel(unit_num).to(device)\n    \n    # optimizerを全結合層のパラメータのみを指定\n    optimizer = optim.Adam(model.parameters(), lr=0.005)\n    \n    # スケジューラの設定\n    scheduler = lr_scheduler.StepLR(optimizer, step_size=4, gamma=0.5)\n    \n    # 損失関数と最適化アルゴリズム\n    criterion = nn.MSELoss()  # 平均二乗誤差損失関数\n\n    # アーリーストッピングの設定\n    early_stopping_patience = 5  # 5エポック改善がなければストップ\n    min_val_loss = np.inf\n    epochs_no_improve = 0\n\n    # 学習曲線を描くためのリスト\n    train_losses = []\n    val_losses = []  # バリデーション損失を記録するリスト\n\n    # 学習ループ\n    print(\"train\")\n    num_epochs = 30\n    for epoch in range(num_epochs):\n        model.train()  # 訓練モード\n        running_loss = 0.0\n\n        for i, (inputs, targets) in enumerate(train_loader_fine):\n            inputs, targets = inputs.to(device), targets.to(device)  # GPUに移動\n            optimizer.zero_grad()  # 勾配の初期化\n            \n#             print(inputs.shape)\n\n            # 順伝播\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n\n            # 逆伝播と最適化\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item()\n\n        # エポックごとの平均損失を記録\n        epoch_loss = running_loss / len(train_loader_fine)\n        train_losses.append(epoch_loss)\n\n        # バリデーションデータでの評価\n        model.eval()  # 評価モード\n        val_running_loss = 0.0\n\n        with torch.no_grad():  # 勾配計算を無効にする\n            for inputs, targets in val_loader_fine:\n                inputs, targets = inputs.to(device), targets.to(device)  # GPUに移動\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                val_running_loss += loss.item()\n\n        val_epoch_loss = val_running_loss / len(val_loader_fine)  # バリデーションの平均損失\n        val_losses.append(val_epoch_loss)\n\n\n\n        # アーリーストッピングの判定\n        if val_epoch_loss < min_val_loss:\n            min_val_loss = val_epoch_loss\n            epochs_no_improve = 0\n        else:\n            epochs_no_improve += 1\n\n        if epochs_no_improve == early_stopping_patience:\n            print(\"Early stopping\")\n            break\n        \n        # 現在の学習率を表示（オプション）\n        current_lr = scheduler.get_last_lr()[0]\n        print(f'Epoch {epoch+1:2}/{num_epochs}, Learning Rate: {current_lr:6.3f}, Train Loss: {epoch_loss:6.2f}, Val Loss: {val_epoch_loss:6.2f}, epochs_no_improve:{epochs_no_improve}')\n\n        # 学習率の更新\n        scheduler.step()\n    \n    # 学習曲線の描画\n    print(\"glf\",labels)\n    plt.plot(train_losses, label='Training Loss')\n    plt.plot(val_losses, label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.yscale('log')\n    plt.title('Loss Curve')\n    plt.legend()\n    plt.show()\n    \n    print(\"test\")\n    # test\n    # モデルを評価モードに切り替え\n    model.eval()\n    \n    # テスト時は勾配を計算しないようにするため、torch.no_grad()を使う\n    with torch.no_grad():\n        # \"Image\"をlabelsから削除\n        labels_ = [label for label in labels if label != 'Image']\n        test[labels_] = 0\n#         print(test.head())\n        \n        # テストデータをバッチごとにループ\n        for i, inputs in enumerate(test_loader):\n            inputs = inputs.to(device)  # GPUに移動\n            # モデルに入力データを渡して予測を取得\n            outputs = model(inputs)\n\n            # 予測結果をリストに追加\n            test.loc[i, labels_] = outputs.detach().cpu().numpy()\n            \n#             if i<5:\n#                 print(inputs)\n#                 print(outputs.detach().cpu().numpy())\n#                 print(test.head(5))\nprint(\"FIN\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T02:17:08.541335Z","iopub.execute_input":"2024-10-28T02:17:08.541748Z","iopub.status.idle":"2024-10-28T03:06:35.936023Z","shell.execute_reply.started":"2024-10-28T02:17:08.541708Z","shell.execute_reply":"2024-10-28T03:06:35.934852Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"変形 ['Image', 'nose_tip_x', 'nose_tip_y']\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 5639/5639 [00:06<00:00, 867.18it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 1410/1410 [00:01<00:00, 878.23it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\nDA:2倍 (11278, 3) (2820, 3)\n削除した行数 2 全体 11278\n削除した行数 1 全体 2820\ndelete (11276, 3) (2819, 3)\ntrain\nEpoch  1/30, Learning Rate: 5.00000e-03, Train Loss: 142.98, Val Loss: 53.79, epochs_no_improve:0\nEpoch  2/30, Learning Rate: 5.00000e-03, Train Loss: 114.39, Val Loss: 52.86, epochs_no_improve:0\nEpoch  3/30, Learning Rate: 5.00000e-03, Train Loss: 99.18, Val Loss: 85.81, epochs_no_improve:1\nEpoch  4/30, Learning Rate: 5.00000e-03, Train Loss: 91.67, Val Loss: 66.98, epochs_no_improve:2\nEpoch  5/30, Learning Rate: 2.50000e-03, Train Loss: 75.82, Val Loss: 37.77, epochs_no_improve:0\nEpoch  6/30, Learning Rate: 2.50000e-03, Train Loss: 70.92, Val Loss: 42.26, epochs_no_improve:1\nEpoch  7/30, Learning Rate: 2.50000e-03, Train Loss: 71.08, Val Loss: 44.16, epochs_no_improve:2\nEpoch  8/30, Learning Rate: 2.50000e-03, Train Loss: 66.35, Val Loss: 51.00, epochs_no_improve:3\nEpoch  9/30, Learning Rate: 1.25000e-03, Train Loss: 61.57, Val Loss: 30.73, epochs_no_improve:0\nEpoch 10/30, Learning Rate: 1.25000e-03, Train Loss: 58.74, Val Loss: 29.12, epochs_no_improve:0\nEpoch 11/30, Learning Rate: 1.25000e-03, Train Loss: 55.87, Val Loss: 30.98, epochs_no_improve:1\nEpoch 12/30, Learning Rate: 1.25000e-03, Train Loss: 56.26, Val Loss: 32.85, epochs_no_improve:2\nEpoch 13/30, Learning Rate: 6.25000e-04, Train Loss: 53.04, Val Loss: 27.99, epochs_no_improve:0\nEpoch 14/30, Learning Rate: 6.25000e-04, Train Loss: 53.37, Val Loss: 27.61, epochs_no_improve:0\nEpoch 15/30, Learning Rate: 6.25000e-04, Train Loss: 53.32, Val Loss: 27.78, epochs_no_improve:1\nEpoch 16/30, Learning Rate: 6.25000e-04, Train Loss: 52.39, Val Loss: 27.98, epochs_no_improve:2\nEpoch 17/30, Learning Rate: 3.12500e-04, Train Loss: 50.58, Val Loss: 26.85, epochs_no_improve:0\nEpoch 18/30, Learning Rate: 3.12500e-04, Train Loss: 50.29, Val Loss: 26.57, epochs_no_improve:0\nEpoch 19/30, Learning Rate: 3.12500e-04, Train Loss: 49.40, Val Loss: 26.66, epochs_no_improve:1\nEpoch 20/30, Learning Rate: 3.12500e-04, Train Loss: 49.20, Val Loss: 26.38, epochs_no_improve:0\nEpoch 21/30, Learning Rate: 1.56250e-04, Train Loss: 48.12, Val Loss: 26.12, epochs_no_improve:0\nEpoch 22/30, Learning Rate: 1.56250e-04, Train Loss: 48.10, Val Loss: 26.05, epochs_no_improve:0\nEpoch 23/30, Learning Rate: 1.56250e-04, Train Loss: 47.79, Val Loss: 25.76, epochs_no_improve:0\nEpoch 24/30, Learning Rate: 1.56250e-04, Train Loss: 47.57, Val Loss: 26.12, epochs_no_improve:1\nEpoch 25/30, Learning Rate: 7.81250e-05, Train Loss: 47.81, Val Loss: 25.89, epochs_no_improve:2\nEpoch 26/30, Learning Rate: 7.81250e-05, Train Loss: 46.89, Val Loss: 25.92, epochs_no_improve:3\nEpoch 27/30, Learning Rate: 7.81250e-05, Train Loss: 46.97, Val Loss: 25.80, epochs_no_improve:4\nEarly stopping\nglf ['Image', 'nose_tip_x', 'nose_tip_y']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"test\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[41.871746]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[54.003002]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n","output_type":"stream"},{"name":"stdout","text":"変形 ['Image', 'left_eye_center_x', 'left_eye_center_y']\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 5631/5631 [00:06<00:00, 871.95it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 1408/1408 [00:01<00:00, 887.93it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\nDA:2倍 (11262, 3) (2816, 3)\n削除した行数 2 全体 11262\n削除した行数 0 全体 2816\ndelete (11260, 3) (2816, 3)\ntrain\nEpoch  1/30, Learning Rate: 5.00000e-03, Train Loss: 139.86, Val Loss: 42.19, epochs_no_improve:0\nEpoch  2/30, Learning Rate: 5.00000e-03, Train Loss: 92.16, Val Loss: 73.32, epochs_no_improve:1\nEpoch  3/30, Learning Rate: 5.00000e-03, Train Loss: 83.43, Val Loss: 29.68, epochs_no_improve:0\nEpoch  4/30, Learning Rate: 5.00000e-03, Train Loss: 77.60, Val Loss: 30.10, epochs_no_improve:1\nEpoch  5/30, Learning Rate: 2.50000e-03, Train Loss: 60.72, Val Loss: 27.46, epochs_no_improve:0\nEpoch  6/30, Learning Rate: 2.50000e-03, Train Loss: 55.85, Val Loss: 25.38, epochs_no_improve:0\nEpoch  7/30, Learning Rate: 2.50000e-03, Train Loss: 56.13, Val Loss: 23.23, epochs_no_improve:0\nEpoch  8/30, Learning Rate: 2.50000e-03, Train Loss: 54.35, Val Loss: 25.23, epochs_no_improve:1\nEpoch  9/30, Learning Rate: 1.25000e-03, Train Loss: 48.81, Val Loss: 22.57, epochs_no_improve:0\nEpoch 10/30, Learning Rate: 1.25000e-03, Train Loss: 45.49, Val Loss: 20.84, epochs_no_improve:0\nEpoch 11/30, Learning Rate: 1.25000e-03, Train Loss: 45.04, Val Loss: 19.07, epochs_no_improve:0\nEpoch 12/30, Learning Rate: 1.25000e-03, Train Loss: 43.50, Val Loss: 18.88, epochs_no_improve:0\nEpoch 13/30, Learning Rate: 6.25000e-04, Train Loss: 38.75, Val Loss: 14.02, epochs_no_improve:0\nEpoch 14/30, Learning Rate: 6.25000e-04, Train Loss: 36.01, Val Loss: 15.38, epochs_no_improve:1\nEpoch 15/30, Learning Rate: 6.25000e-04, Train Loss: 35.49, Val Loss: 10.46, epochs_no_improve:0\nEpoch 16/30, Learning Rate: 6.25000e-04, Train Loss: 34.38, Val Loss: 10.19, epochs_no_improve:0\nEpoch 17/30, Learning Rate: 3.12500e-04, Train Loss: 31.46, Val Loss: 8.60, epochs_no_improve:0\nEpoch 18/30, Learning Rate: 3.12500e-04, Train Loss: 30.98, Val Loss: 8.47, epochs_no_improve:0\nEpoch 19/30, Learning Rate: 3.12500e-04, Train Loss: 30.49, Val Loss: 8.35, epochs_no_improve:0\nEpoch 20/30, Learning Rate: 3.12500e-04, Train Loss: 30.40, Val Loss: 8.42, epochs_no_improve:1\nEpoch 21/30, Learning Rate: 1.56250e-04, Train Loss: 29.82, Val Loss: 7.06, epochs_no_improve:0\nEpoch 22/30, Learning Rate: 1.56250e-04, Train Loss: 29.19, Val Loss: 7.75, epochs_no_improve:1\nEpoch 23/30, Learning Rate: 1.56250e-04, Train Loss: 28.52, Val Loss: 7.38, epochs_no_improve:2\nEpoch 24/30, Learning Rate: 1.56250e-04, Train Loss: 28.63, Val Loss: 6.67, epochs_no_improve:0\nEpoch 25/30, Learning Rate: 7.81250e-05, Train Loss: 28.01, Val Loss: 7.06, epochs_no_improve:1\nEpoch 26/30, Learning Rate: 7.81250e-05, Train Loss: 27.60, Val Loss: 6.43, epochs_no_improve:0\nEpoch 27/30, Learning Rate: 7.81250e-05, Train Loss: 27.49, Val Loss: 6.28, epochs_no_improve:0\nEpoch 28/30, Learning Rate: 7.81250e-05, Train Loss: 27.73, Val Loss: 6.24, epochs_no_improve:0\nEpoch 29/30, Learning Rate: 3.90625e-05, Train Loss: 27.41, Val Loss: 6.44, epochs_no_improve:1\nEpoch 30/30, Learning Rate: 3.90625e-05, Train Loss: 27.16, Val Loss: 6.37, epochs_no_improve:2\nglf ['Image', 'left_eye_center_x', 'left_eye_center_y']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"test\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[64.53778]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[35.428974]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n","output_type":"stream"},{"name":"stdout","text":"変形 ['Image', 'right_eye_center_x', 'right_eye_center_y']\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 5628/5628 [00:06<00:00, 869.79it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 1408/1408 [00:01<00:00, 841.44it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\nDA:2倍 (11256, 3) (2816, 3)\n削除した行数 0 全体 11256\n削除した行数 0 全体 2816\ndelete (11256, 3) (2816, 3)\ntrain\nEpoch  1/30, Learning Rate: 5.00000e-03, Train Loss: 76.87, Val Loss: 50.22, epochs_no_improve:0\nEpoch  2/30, Learning Rate: 5.00000e-03, Train Loss: 60.11, Val Loss: 36.21, epochs_no_improve:0\nEpoch  3/30, Learning Rate: 5.00000e-03, Train Loss: 52.83, Val Loss: 30.63, epochs_no_improve:0\nEpoch  4/30, Learning Rate: 5.00000e-03, Train Loss: 49.17, Val Loss: 26.49, epochs_no_improve:0\nEpoch  5/30, Learning Rate: 2.50000e-03, Train Loss: 41.96, Val Loss: 26.04, epochs_no_improve:0\nEpoch  6/30, Learning Rate: 2.50000e-03, Train Loss: 39.11, Val Loss: 27.46, epochs_no_improve:1\nEpoch  7/30, Learning Rate: 2.50000e-03, Train Loss: 37.56, Val Loss: 22.22, epochs_no_improve:0\nEpoch  8/30, Learning Rate: 2.50000e-03, Train Loss: 36.24, Val Loss: 20.23, epochs_no_improve:0\nEpoch  9/30, Learning Rate: 1.25000e-03, Train Loss: 31.28, Val Loss: 13.52, epochs_no_improve:0\nEpoch 10/30, Learning Rate: 1.25000e-03, Train Loss: 27.18, Val Loss: 12.26, epochs_no_improve:0\nEpoch 11/30, Learning Rate: 1.25000e-03, Train Loss: 25.33, Val Loss: 8.83, epochs_no_improve:0\nEpoch 12/30, Learning Rate: 1.25000e-03, Train Loss: 23.68, Val Loss: 11.32, epochs_no_improve:1\nEpoch 13/30, Learning Rate: 6.25000e-04, Train Loss: 22.35, Val Loss: 7.11, epochs_no_improve:0\nEpoch 14/30, Learning Rate: 6.25000e-04, Train Loss: 21.79, Val Loss: 7.15, epochs_no_improve:1\nEpoch 15/30, Learning Rate: 6.25000e-04, Train Loss: 20.28, Val Loss: 7.79, epochs_no_improve:2\nEpoch 16/30, Learning Rate: 6.25000e-04, Train Loss: 20.39, Val Loss: 7.37, epochs_no_improve:3\nEpoch 17/30, Learning Rate: 3.12500e-04, Train Loss: 19.31, Val Loss: 6.46, epochs_no_improve:0\nEpoch 18/30, Learning Rate: 3.12500e-04, Train Loss: 18.98, Val Loss: 6.40, epochs_no_improve:0\nEpoch 19/30, Learning Rate: 3.12500e-04, Train Loss: 19.09, Val Loss: 6.29, epochs_no_improve:0\nEpoch 20/30, Learning Rate: 3.12500e-04, Train Loss: 18.49, Val Loss: 6.23, epochs_no_improve:0\nEpoch 21/30, Learning Rate: 1.56250e-04, Train Loss: 17.89, Val Loss: 5.86, epochs_no_improve:0\nEpoch 22/30, Learning Rate: 1.56250e-04, Train Loss: 17.90, Val Loss: 6.08, epochs_no_improve:1\nEpoch 23/30, Learning Rate: 1.56250e-04, Train Loss: 17.74, Val Loss: 5.87, epochs_no_improve:2\nEpoch 24/30, Learning Rate: 1.56250e-04, Train Loss: 17.55, Val Loss: 6.26, epochs_no_improve:3\nEpoch 25/30, Learning Rate: 7.81250e-05, Train Loss: 17.40, Val Loss: 5.80, epochs_no_improve:0\nEpoch 26/30, Learning Rate: 7.81250e-05, Train Loss: 17.25, Val Loss: 5.87, epochs_no_improve:1\nEpoch 27/30, Learning Rate: 7.81250e-05, Train Loss: 16.91, Val Loss: 5.84, epochs_no_improve:2\nEpoch 28/30, Learning Rate: 7.81250e-05, Train Loss: 17.60, Val Loss: 5.83, epochs_no_improve:3\nEpoch 29/30, Learning Rate: 3.90625e-05, Train Loss: 17.12, Val Loss: 6.00, epochs_no_improve:4\nEpoch 30/30, Learning Rate: 3.90625e-05, Train Loss: 17.08, Val Loss: 5.80, epochs_no_improve:0\nglf ['Image', 'right_eye_center_x', 'right_eye_center_y']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"test\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[27.985065]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[36.049183]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n","output_type":"stream"},{"name":"stdout","text":"変形 ['Image', 'left_eye_inner_corner_x', 'left_eye_inner_corner_y', 'left_eye_outer_corner_x', 'left_eye_outer_corner_y', 'right_eye_inner_corner_x', 'right_eye_inner_corner_y', 'right_eye_outer_corner_x', 'right_eye_outer_corner_y', 'left_eyebrow_inner_end_x', 'left_eyebrow_inner_end_y', 'left_eyebrow_outer_end_x', 'left_eyebrow_outer_end_y', 'right_eyebrow_inner_end_x', 'right_eyebrow_inner_end_y', 'right_eyebrow_outer_end_x', 'right_eyebrow_outer_end_y', 'mouth_left_corner_x', 'mouth_left_corner_y', 'mouth_right_corner_x', 'mouth_right_corner_y', 'mouth_center_top_lip_x', 'mouth_center_top_lip_y']\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 1724/1724 [00:09<00:00, 190.27it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 431/431 [00:02<00:00, 191.32it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\nDA:8倍 (13792, 23) (3448, 23)\n削除した行数 298 全体 13792\n削除した行数 73 全体 3448\ndelete (13494, 23) (3375, 23)\ntrain\nEpoch  1/30, Learning Rate: 5.00000e-03, Train Loss: 128.00, Val Loss: 52.03, epochs_no_improve:0\nEpoch  2/30, Learning Rate: 5.00000e-03, Train Loss: 95.43, Val Loss: 45.19, epochs_no_improve:0\nEpoch  3/30, Learning Rate: 5.00000e-03, Train Loss: 83.64, Val Loss: 50.67, epochs_no_improve:1\nEpoch  4/30, Learning Rate: 5.00000e-03, Train Loss: 74.65, Val Loss: 33.00, epochs_no_improve:0\nEpoch  5/30, Learning Rate: 2.50000e-03, Train Loss: 57.09, Val Loss: 24.21, epochs_no_improve:0\nEpoch  6/30, Learning Rate: 2.50000e-03, Train Loss: 47.19, Val Loss: 15.96, epochs_no_improve:0\nEpoch  7/30, Learning Rate: 2.50000e-03, Train Loss: 44.47, Val Loss: 15.63, epochs_no_improve:0\nEpoch  8/30, Learning Rate: 2.50000e-03, Train Loss: 42.29, Val Loss: 14.61, epochs_no_improve:0\nEpoch  9/30, Learning Rate: 1.25000e-03, Train Loss: 35.30, Val Loss: 9.14, epochs_no_improve:0\nEpoch 10/30, Learning Rate: 1.25000e-03, Train Loss: 34.82, Val Loss: 10.33, epochs_no_improve:1\nEpoch 11/30, Learning Rate: 1.25000e-03, Train Loss: 32.87, Val Loss: 15.65, epochs_no_improve:2\nEpoch 12/30, Learning Rate: 1.25000e-03, Train Loss: 32.14, Val Loss: 7.66, epochs_no_improve:0\nEpoch 13/30, Learning Rate: 6.25000e-04, Train Loss: 30.58, Val Loss: 7.20, epochs_no_improve:0\nEpoch 14/30, Learning Rate: 6.25000e-04, Train Loss: 29.61, Val Loss: 7.47, epochs_no_improve:1\nEpoch 15/30, Learning Rate: 6.25000e-04, Train Loss: 28.74, Val Loss: 6.85, epochs_no_improve:0\nEpoch 16/30, Learning Rate: 6.25000e-04, Train Loss: 28.52, Val Loss: 6.69, epochs_no_improve:0\nEpoch 17/30, Learning Rate: 3.12500e-04, Train Loss: 27.92, Val Loss: 6.34, epochs_no_improve:0\nEpoch 18/30, Learning Rate: 3.12500e-04, Train Loss: 26.96, Val Loss: 6.56, epochs_no_improve:1\nEpoch 19/30, Learning Rate: 3.12500e-04, Train Loss: 25.99, Val Loss: 6.47, epochs_no_improve:2\nEpoch 20/30, Learning Rate: 3.12500e-04, Train Loss: 26.56, Val Loss: 6.52, epochs_no_improve:3\nEpoch 21/30, Learning Rate: 1.56250e-04, Train Loss: 25.83, Val Loss: 6.48, epochs_no_improve:4\nEpoch 22/30, Learning Rate: 1.56250e-04, Train Loss: 25.62, Val Loss: 5.90, epochs_no_improve:0\nEpoch 23/30, Learning Rate: 1.56250e-04, Train Loss: 25.60, Val Loss: 5.93, epochs_no_improve:1\nEpoch 24/30, Learning Rate: 1.56250e-04, Train Loss: 25.12, Val Loss: 5.85, epochs_no_improve:0\nEpoch 25/30, Learning Rate: 7.81250e-05, Train Loss: 24.92, Val Loss: 5.68, epochs_no_improve:0\nEpoch 26/30, Learning Rate: 7.81250e-05, Train Loss: 24.67, Val Loss: 5.79, epochs_no_improve:1\nEpoch 27/30, Learning Rate: 7.81250e-05, Train Loss: 25.10, Val Loss: 5.72, epochs_no_improve:2\nEpoch 28/30, Learning Rate: 7.81250e-05, Train Loss: 24.61, Val Loss: 5.68, epochs_no_improve:3\nEpoch 29/30, Learning Rate: 3.90625e-05, Train Loss: 24.69, Val Loss: 5.59, epochs_no_improve:0\nEpoch 30/30, Learning Rate: 3.90625e-05, Train Loss: 24.43, Val Loss: 5.48, epochs_no_improve:0\nglf ['Image', 'left_eye_inner_corner_x', 'left_eye_inner_corner_y', 'left_eye_outer_corner_x', 'left_eye_outer_corner_y', 'right_eye_inner_corner_x', 'right_eye_inner_corner_y', 'right_eye_outer_corner_x', 'right_eye_outer_corner_y', 'left_eyebrow_inner_end_x', 'left_eyebrow_inner_end_y', 'left_eyebrow_outer_end_x', 'left_eyebrow_outer_end_y', 'right_eyebrow_inner_end_x', 'right_eyebrow_inner_end_y', 'right_eyebrow_outer_end_x', 'right_eyebrow_outer_end_y', 'mouth_left_corner_x', 'mouth_left_corner_y', 'mouth_right_corner_x', 'mouth_right_corner_y', 'mouth_center_top_lip_x', 'mouth_center_top_lip_y']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"test\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[58.690926]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[36.38626]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[73.0399]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[36.37094]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[35.792606]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[36.190956]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[21.369183]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[36.11574]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[55.60849]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[27.50751]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[79.541534]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[28.498865]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[38.573936]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[27.380182]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[14.60605]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[28.418732]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[62.408398]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[74.67407]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[31.659246]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[74.521]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[46.955696]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[71.098816]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n","output_type":"stream"},{"name":"stdout","text":"変形 ['Image', 'mouth_center_bottom_lip_x', 'mouth_center_bottom_lip_y']\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 5612/5612 [00:06<00:00, 864.33it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\n","output_type":"stream"},{"name":"stderr","text":"DA: 100%|██████████| 1404/1404 [00:01<00:00, 869.45it/s]\n","output_type":"stream"},{"name":"stdout","text":"concat\nconcat_fin\nDA:2倍 (11224, 3) (2808, 3)\n削除した行数 72 全体 11224\n削除した行数 20 全体 2808\ndelete (11152, 3) (2788, 3)\ntrain\nEpoch  1/30, Learning Rate: 5.00000e-03, Train Loss: 189.33, Val Loss: 121.84, epochs_no_improve:0\nEpoch  2/30, Learning Rate: 5.00000e-03, Train Loss: 135.74, Val Loss: 96.13, epochs_no_improve:0\nEpoch  3/30, Learning Rate: 5.00000e-03, Train Loss: 123.13, Val Loss: 48.13, epochs_no_improve:0\nEpoch  4/30, Learning Rate: 5.00000e-03, Train Loss: 110.86, Val Loss: 61.73, epochs_no_improve:1\nEpoch  5/30, Learning Rate: 2.50000e-03, Train Loss: 89.91, Val Loss: 61.23, epochs_no_improve:2\nEpoch  6/30, Learning Rate: 2.50000e-03, Train Loss: 85.62, Val Loss: 45.00, epochs_no_improve:0\nEpoch  7/30, Learning Rate: 2.50000e-03, Train Loss: 84.68, Val Loss: 56.66, epochs_no_improve:1\nEpoch  8/30, Learning Rate: 2.50000e-03, Train Loss: 82.32, Val Loss: 39.85, epochs_no_improve:0\nEpoch  9/30, Learning Rate: 1.25000e-03, Train Loss: 71.09, Val Loss: 38.21, epochs_no_improve:0\nEpoch 10/30, Learning Rate: 1.25000e-03, Train Loss: 69.87, Val Loss: 36.00, epochs_no_improve:0\nEpoch 11/30, Learning Rate: 1.25000e-03, Train Loss: 69.16, Val Loss: 37.72, epochs_no_improve:1\nEpoch 12/30, Learning Rate: 1.25000e-03, Train Loss: 66.94, Val Loss: 38.13, epochs_no_improve:2\nEpoch 13/30, Learning Rate: 6.25000e-04, Train Loss: 62.37, Val Loss: 35.24, epochs_no_improve:0\nEpoch 14/30, Learning Rate: 6.25000e-04, Train Loss: 61.42, Val Loss: 33.08, epochs_no_improve:0\nEpoch 15/30, Learning Rate: 6.25000e-04, Train Loss: 60.81, Val Loss: 34.39, epochs_no_improve:1\nEpoch 16/30, Learning Rate: 6.25000e-04, Train Loss: 59.32, Val Loss: 30.00, epochs_no_improve:0\nEpoch 17/30, Learning Rate: 3.12500e-04, Train Loss: 55.26, Val Loss: 22.12, epochs_no_improve:0\nEpoch 18/30, Learning Rate: 3.12500e-04, Train Loss: 51.23, Val Loss: 20.17, epochs_no_improve:0\nEpoch 19/30, Learning Rate: 3.12500e-04, Train Loss: 48.73, Val Loss: 17.01, epochs_no_improve:0\nEpoch 20/30, Learning Rate: 3.12500e-04, Train Loss: 46.53, Val Loss: 15.21, epochs_no_improve:0\nEpoch 21/30, Learning Rate: 1.56250e-04, Train Loss: 44.56, Val Loss: 14.39, epochs_no_improve:0\nEpoch 22/30, Learning Rate: 1.56250e-04, Train Loss: 43.56, Val Loss: 14.71, epochs_no_improve:1\nEpoch 23/30, Learning Rate: 1.56250e-04, Train Loss: 44.43, Val Loss: 13.57, epochs_no_improve:0\nEpoch 24/30, Learning Rate: 1.56250e-04, Train Loss: 44.03, Val Loss: 17.61, epochs_no_improve:1\nEpoch 25/30, Learning Rate: 7.81250e-05, Train Loss: 43.01, Val Loss: 13.09, epochs_no_improve:0\nEpoch 26/30, Learning Rate: 7.81250e-05, Train Loss: 42.55, Val Loss: 13.06, epochs_no_improve:0\nEpoch 27/30, Learning Rate: 7.81250e-05, Train Loss: 42.06, Val Loss: 12.94, epochs_no_improve:0\nEpoch 28/30, Learning Rate: 7.81250e-05, Train Loss: 40.98, Val Loss: 13.26, epochs_no_improve:1\nEpoch 29/30, Learning Rate: 3.90625e-05, Train Loss: 41.34, Val Loss: 12.96, epochs_no_improve:2\nEpoch 30/30, Learning Rate: 3.90625e-05, Train Loss: 40.81, Val Loss: 12.42, epochs_no_improve:0\nglf ['Image', 'mouth_center_bottom_lip_x', 'mouth_center_bottom_lip_y']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"test\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[47.506203]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n/tmp/ipykernel_466/1636364629.py:168: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[82.39898]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n  test.loc[i, labels_] = outputs.detach().cpu().numpy()\n","output_type":"stream"},{"name":"stdout","text":"FIN\n","output_type":"stream"}]},{"cell_type":"code","source":"# 入力サイズを指定（例えば、入力が1チャネルの96x96の画像の場合）\nprint(summary(model, input_size=(1, 96, 96)))","metadata":{"execution":{"iopub.status.busy":"2024-10-28T03:06:35.937959Z","iopub.execute_input":"2024-10-28T03:06:35.938359Z","iopub.status.idle":"2024-10-28T03:06:35.996754Z","shell.execute_reply.started":"2024-10-28T03:06:35.938311Z","shell.execute_reply":"2024-10-28T03:06:35.995713Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"----------------------------------------------------------------\n        Layer (type)               Output Shape         Param #\n================================================================\n            Conv2d-1           [-1, 32, 96, 96]             320\n       BatchNorm2d-2           [-1, 32, 96, 96]              64\n         MaxPool2d-3           [-1, 32, 48, 48]               0\n           Dropout-4           [-1, 32, 48, 48]               0\n            Conv2d-5           [-1, 64, 48, 48]          18,496\n       BatchNorm2d-6           [-1, 64, 48, 48]             128\n         MaxPool2d-7           [-1, 64, 24, 24]               0\n           Dropout-8           [-1, 64, 24, 24]               0\n            Conv2d-9          [-1, 128, 24, 24]          73,856\n      BatchNorm2d-10          [-1, 128, 24, 24]             256\n        MaxPool2d-11          [-1, 128, 12, 12]               0\n          Dropout-12          [-1, 128, 12, 12]               0\n           Conv2d-13          [-1, 256, 12, 12]         295,168\n      BatchNorm2d-14          [-1, 256, 12, 12]             512\n        MaxPool2d-15            [-1, 256, 6, 6]               0\n          Dropout-16            [-1, 256, 6, 6]               0\n           Conv2d-17            [-1, 512, 6, 6]       1,180,160\n      BatchNorm2d-18            [-1, 512, 6, 6]           1,024\n        MaxPool2d-19            [-1, 512, 3, 3]               0\n          Dropout-20            [-1, 512, 3, 3]               0\n           Conv2d-21           [-1, 1024, 3, 3]       4,719,616\n      BatchNorm2d-22           [-1, 1024, 3, 3]           2,048\n          Dropout-23           [-1, 1024, 3, 3]               0\n           Linear-24                 [-1, 3072]      28,314,624\n      BatchNorm1d-25                 [-1, 3072]           6,144\n          Dropout-26                 [-1, 3072]               0\n           Linear-27                 [-1, 1024]       3,146,752\n          Dropout-28                 [-1, 1024]               0\n           Linear-29                    [-1, 2]           2,050\n================================================================\nTotal params: 37,761,218\nTrainable params: 37,761,218\nNon-trainable params: 0\n----------------------------------------------------------------\nInput size (MB): 0.04\nForward/backward pass size (MB): 11.20\nParams size (MB): 144.05\nEstimated Total Size (MB): 155.28\n----------------------------------------------------------------\nNone\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 列ごと、DA、提出","metadata":{}},{"cell_type":"code","source":"# 結果を確認\nprint(IdL.isnull().sum())\n\n# 'ImageID' と 'FeatureName' に基づいて、2次元表から値を取り出して 'Location' に格納\nfor idx, row in IdL.iterrows():\n    image_id = row['ImageId']-1\n    feature_name = row['FeatureName']\n    \n    # 2次元表(pivot_table)から、対応する 'ImageID' と 'FeatureName' の値を取得\n    value = test.loc[image_id, feature_name]\n    \n    # 'Location' 列に値を格納\n    IdL.at[idx, 'Location'] = value\n\n\n# 結果を確認\nprint(IdL.isnull().sum())\nprint(IdL.head())","metadata":{"execution":{"iopub.status.busy":"2024-10-28T03:08:37.723940Z","iopub.execute_input":"2024-10-28T03:08:37.724694Z","iopub.status.idle":"2024-10-28T03:08:40.740571Z","shell.execute_reply.started":"2024-10-28T03:08:37.724628Z","shell.execute_reply":"2024-10-28T03:08:40.739442Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"RowId              0\nImageId            0\nFeatureName        0\nLocation       27124\ndtype: int64\nRowId          0\nImageId        0\nFeatureName    0\nLocation       0\ndtype: int64\n   RowId  ImageId              FeatureName   Location\n0      1        1        left_eye_center_x  64.537781\n1      2        1        left_eye_center_y  35.428974\n2      3        1       right_eye_center_x  27.985065\n3      4        1       right_eye_center_y  36.049183\n4      5        1  left_eye_inner_corner_x  58.690926\n","output_type":"stream"}]},{"cell_type":"code","source":"IdL = IdL.drop(['ImageId',\"FeatureName\"],axis=1)\n# CSVファイルに出力（インデックスなし）\nIdL.to_csv('submission_ffill_8.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-10-28T03:08:40.742213Z","iopub.execute_input":"2024-10-28T03:08:40.742563Z","iopub.status.idle":"2024-10-28T03:08:40.827857Z","shell.execute_reply.started":"2024-10-28T03:08:40.742525Z","shell.execute_reply":"2024-10-28T03:08:40.826909Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}